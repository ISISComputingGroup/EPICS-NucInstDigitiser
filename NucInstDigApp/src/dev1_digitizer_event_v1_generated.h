// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEV1DIGITIZEREVENTV1_H_
#define FLATBUFFERS_GENERATED_DEV1DIGITIZEREVENTV1_H_

#include "flatbuffers/flatbuffers.h"

#include "status_packet_v1_generated.h"

struct DigitizerEventListMessage;
struct DigitizerEventListMessageBuilder;

struct DigitizerEventListMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DigitizerEventListMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIGITIZER_ID = 4,
    VT_STATUS = 6,
    VT_TIME = 8,
    VT_VOLTAGE = 10,
    VT_CHANNEL = 12
  };
  uint8_t digitizer_id() const {
    return GetField<uint8_t>(VT_DIGITIZER_ID, 0);
  }
  const StatusPacketV1 *status() const {
    return GetPointer<const StatusPacketV1 *>(VT_STATUS);
  }
  const flatbuffers::Vector<uint32_t> *time() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_TIME);
  }
  const flatbuffers::Vector<uint16_t> *voltage() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_VOLTAGE);
  }
  const flatbuffers::Vector<uint32_t> *channel() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_CHANNEL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DIGITIZER_ID, 1) &&
           VerifyOffsetRequired(verifier, VT_STATUS) &&
           verifier.VerifyTable(status()) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyVector(time()) &&
           VerifyOffset(verifier, VT_VOLTAGE) &&
           verifier.VerifyVector(voltage()) &&
           VerifyOffset(verifier, VT_CHANNEL) &&
           verifier.VerifyVector(channel()) &&
           verifier.EndTable();
  }
};

struct DigitizerEventListMessageBuilder {
  typedef DigitizerEventListMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_digitizer_id(uint8_t digitizer_id) {
    fbb_.AddElement<uint8_t>(DigitizerEventListMessage::VT_DIGITIZER_ID, digitizer_id, 0);
  }
  void add_status(flatbuffers::Offset<StatusPacketV1> status) {
    fbb_.AddOffset(DigitizerEventListMessage::VT_STATUS, status);
  }
  void add_time(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> time) {
    fbb_.AddOffset(DigitizerEventListMessage::VT_TIME, time);
  }
  void add_voltage(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> voltage) {
    fbb_.AddOffset(DigitizerEventListMessage::VT_VOLTAGE, voltage);
  }
  void add_channel(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> channel) {
    fbb_.AddOffset(DigitizerEventListMessage::VT_CHANNEL, channel);
  }
  explicit DigitizerEventListMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DigitizerEventListMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DigitizerEventListMessage>(end);
    fbb_.Required(o, DigitizerEventListMessage::VT_STATUS);
    return o;
  }
};

inline flatbuffers::Offset<DigitizerEventListMessage> CreateDigitizerEventListMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t digitizer_id = 0,
    flatbuffers::Offset<StatusPacketV1> status = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> time = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> voltage = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> channel = 0) {
  DigitizerEventListMessageBuilder builder_(_fbb);
  builder_.add_channel(channel);
  builder_.add_voltage(voltage);
  builder_.add_time(time);
  builder_.add_status(status);
  builder_.add_digitizer_id(digitizer_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<DigitizerEventListMessage> CreateDigitizerEventListMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t digitizer_id = 0,
    flatbuffers::Offset<StatusPacketV1> status = 0,
    const std::vector<uint32_t> *time = nullptr,
    const std::vector<uint16_t> *voltage = nullptr,
    const std::vector<uint32_t> *channel = nullptr) {
  auto time__ = time ? _fbb.CreateVector<uint32_t>(*time) : 0;
  auto voltage__ = voltage ? _fbb.CreateVector<uint16_t>(*voltage) : 0;
  auto channel__ = channel ? _fbb.CreateVector<uint32_t>(*channel) : 0;
  return CreateDigitizerEventListMessage(
      _fbb,
      digitizer_id,
      status,
      time__,
      voltage__,
      channel__);
}

inline const DigitizerEventListMessage *GetDigitizerEventListMessage(const void *buf) {
  return flatbuffers::GetRoot<DigitizerEventListMessage>(buf);
}

inline const DigitizerEventListMessage *GetSizePrefixedDigitizerEventListMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DigitizerEventListMessage>(buf);
}

inline const char *DigitizerEventListMessageIdentifier() {
  return "dev1";
}

inline bool DigitizerEventListMessageBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, DigitizerEventListMessageIdentifier());
}

inline bool SizePrefixedDigitizerEventListMessageBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, DigitizerEventListMessageIdentifier(), true);
}

inline bool VerifyDigitizerEventListMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DigitizerEventListMessage>(DigitizerEventListMessageIdentifier());
}

inline bool VerifySizePrefixedDigitizerEventListMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DigitizerEventListMessage>(DigitizerEventListMessageIdentifier());
}

inline void FinishDigitizerEventListMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DigitizerEventListMessage> root) {
  fbb.Finish(root, DigitizerEventListMessageIdentifier());
}

inline void FinishSizePrefixedDigitizerEventListMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DigitizerEventListMessage> root) {
  fbb.FinishSizePrefixed(root, DigitizerEventListMessageIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_DEV1DIGITIZEREVENTV1_H_

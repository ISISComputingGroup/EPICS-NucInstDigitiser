// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DAT2DIGITIZERANALOGTRACEV2_H_
#define FLATBUFFERS_GENERATED_DAT2DIGITIZERANALOGTRACEV2_H_

#include "flatbuffers/flatbuffers.h"

#include "frame_metadata_v2_generated.h"

struct ChannelTrace;
struct ChannelTraceBuilder;

struct DigitizerAnalogTraceMessage;
struct DigitizerAnalogTraceMessageBuilder;

struct ChannelTrace FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChannelTraceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHANNEL = 4,
    VT_VOLTAGE = 6
  };
  uint32_t channel() const {
    return GetField<uint32_t>(VT_CHANNEL, 0);
  }
  const flatbuffers::Vector<uint16_t> *voltage() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_VOLTAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CHANNEL, 4) &&
           VerifyOffset(verifier, VT_VOLTAGE) &&
           verifier.VerifyVector(voltage()) &&
           verifier.EndTable();
  }
};

struct ChannelTraceBuilder {
  typedef ChannelTrace Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_channel(uint32_t channel) {
    fbb_.AddElement<uint32_t>(ChannelTrace::VT_CHANNEL, channel, 0);
  }
  void add_voltage(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> voltage) {
    fbb_.AddOffset(ChannelTrace::VT_VOLTAGE, voltage);
  }
  explicit ChannelTraceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ChannelTrace> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChannelTrace>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChannelTrace> CreateChannelTrace(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t channel = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> voltage = 0) {
  ChannelTraceBuilder builder_(_fbb);
  builder_.add_voltage(voltage);
  builder_.add_channel(channel);
  return builder_.Finish();
}

inline flatbuffers::Offset<ChannelTrace> CreateChannelTraceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t channel = 0,
    const std::vector<uint16_t> *voltage = nullptr) {
  auto voltage__ = voltage ? _fbb.CreateVector<uint16_t>(*voltage) : 0;
  return CreateChannelTrace(
      _fbb,
      channel,
      voltage__);
}

struct DigitizerAnalogTraceMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DigitizerAnalogTraceMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIGITIZER_ID = 4,
    VT_METADATA = 6,
    VT_SAMPLE_RATE = 8,
    VT_CHANNELS = 10
  };
  uint8_t digitizer_id() const {
    return GetField<uint8_t>(VT_DIGITIZER_ID, 0);
  }
  const FrameMetadataV2 *metadata() const {
    return GetPointer<const FrameMetadataV2 *>(VT_METADATA);
  }
  uint64_t sample_rate() const {
    return GetField<uint64_t>(VT_SAMPLE_RATE, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ChannelTrace>> *channels() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ChannelTrace>> *>(VT_CHANNELS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DIGITIZER_ID, 1) &&
           VerifyOffsetRequired(verifier, VT_METADATA) &&
           verifier.VerifyTable(metadata()) &&
           VerifyField<uint64_t>(verifier, VT_SAMPLE_RATE, 8) &&
           VerifyOffset(verifier, VT_CHANNELS) &&
           verifier.VerifyVector(channels()) &&
           verifier.VerifyVectorOfTables(channels()) &&
           verifier.EndTable();
  }
};

struct DigitizerAnalogTraceMessageBuilder {
  typedef DigitizerAnalogTraceMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_digitizer_id(uint8_t digitizer_id) {
    fbb_.AddElement<uint8_t>(DigitizerAnalogTraceMessage::VT_DIGITIZER_ID, digitizer_id, 0);
  }
  void add_metadata(flatbuffers::Offset<FrameMetadataV2> metadata) {
    fbb_.AddOffset(DigitizerAnalogTraceMessage::VT_METADATA, metadata);
  }
  void add_sample_rate(uint64_t sample_rate) {
    fbb_.AddElement<uint64_t>(DigitizerAnalogTraceMessage::VT_SAMPLE_RATE, sample_rate, 0);
  }
  void add_channels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ChannelTrace>>> channels) {
    fbb_.AddOffset(DigitizerAnalogTraceMessage::VT_CHANNELS, channels);
  }
  explicit DigitizerAnalogTraceMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DigitizerAnalogTraceMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DigitizerAnalogTraceMessage>(end);
    fbb_.Required(o, DigitizerAnalogTraceMessage::VT_METADATA);
    return o;
  }
};

inline flatbuffers::Offset<DigitizerAnalogTraceMessage> CreateDigitizerAnalogTraceMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t digitizer_id = 0,
    flatbuffers::Offset<FrameMetadataV2> metadata = 0,
    uint64_t sample_rate = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ChannelTrace>>> channels = 0) {
  DigitizerAnalogTraceMessageBuilder builder_(_fbb);
  builder_.add_sample_rate(sample_rate);
  builder_.add_channels(channels);
  builder_.add_metadata(metadata);
  builder_.add_digitizer_id(digitizer_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<DigitizerAnalogTraceMessage> CreateDigitizerAnalogTraceMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t digitizer_id = 0,
    flatbuffers::Offset<FrameMetadataV2> metadata = 0,
    uint64_t sample_rate = 0,
    const std::vector<flatbuffers::Offset<ChannelTrace>> *channels = nullptr) {
  auto channels__ = channels ? _fbb.CreateVector<flatbuffers::Offset<ChannelTrace>>(*channels) : 0;
  return CreateDigitizerAnalogTraceMessage(
      _fbb,
      digitizer_id,
      metadata,
      sample_rate,
      channels__);
}

inline const DigitizerAnalogTraceMessage *GetDigitizerAnalogTraceMessage(const void *buf) {
  return flatbuffers::GetRoot<DigitizerAnalogTraceMessage>(buf);
}

inline const DigitizerAnalogTraceMessage *GetSizePrefixedDigitizerAnalogTraceMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DigitizerAnalogTraceMessage>(buf);
}

inline const char *DigitizerAnalogTraceMessageIdentifier() {
  return "dat2";
}

inline bool DigitizerAnalogTraceMessageBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, DigitizerAnalogTraceMessageIdentifier());
}

inline bool SizePrefixedDigitizerAnalogTraceMessageBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, DigitizerAnalogTraceMessageIdentifier(), true);
}

inline bool VerifyDigitizerAnalogTraceMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DigitizerAnalogTraceMessage>(DigitizerAnalogTraceMessageIdentifier());
}

inline bool VerifySizePrefixedDigitizerAnalogTraceMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DigitizerAnalogTraceMessage>(DigitizerAnalogTraceMessageIdentifier());
}

inline void FinishDigitizerAnalogTraceMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DigitizerAnalogTraceMessage> root) {
  fbb.Finish(root, DigitizerAnalogTraceMessageIdentifier());
}

inline void FinishSizePrefixedDigitizerAnalogTraceMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DigitizerAnalogTraceMessage> root) {
  fbb.FinishSizePrefixed(root, DigitizerAnalogTraceMessageIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_DAT2DIGITIZERANALOGTRACEV2_H_
